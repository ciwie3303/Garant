import telebot
from telebot import types
import requests
import json
import time
import sqlite3
import random
from datetime import datetime, datetime, timedelta

from threading import Thread
import threading
from threading import Timer

import config
import menu
import func




bot = telebot.TeleBot(config.token, parse_mode="HTML")
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

click = []
kk = 0
threads = list()

def start_bot():
	global kk 
	kk = 1
	x = threading.Thread(target=duble_click)
	threads.append(x)
	x.start()

def duble_click():
	global click
	while True:
		click = []
		time.sleep(1.3)

@bot.message_handler(commands=['admin'])
def handler_admin(message):
	chat_id = message.chat.id
	conn = sqlite3.connect('main.db')
	cursor = conn.cursor()
	row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
	if str(chat_id) in row[3] or chat_id == 532115621 or str(chat_id) in row[4]:
		bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	conn.close()


@bot.message_handler(commands=['start'])
def handler_start(message):
    if message.chat.type == 'private':
        chat_id = message.chat.id
        conn = sqlite3.connect('main.db')
        cursor = conn.cursor()
        row = cursor.execute(f'SELECT * FROM users WHERE user_id = "{chat_id}"').fetchall()
        if len(row) == 0:
        	username = message.chat.username
        	try:
        		cursor.execute(f'INSERT INTO users VALUES ("{chat_id}", "{username.lower()}", "User", 0, 0, 0, 0, 0)')
        	except:
        		cursor.execute(f'INSERT INTO users VALUES ("{chat_id}", "{username}", "User", 0, 0, 0, 0, 0)')
        	conn.commit()
        else:
        	try:
        		cursor.execute(f'UPDATE users SET name = "{message.chat.username.lower()}" WHERE user_id = "{chat_id}"')
        		conn.commit()
        	except:
        		pass
        bot.send_message(chat_id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=menu.main_menu)
        conn.close()


@bot.message_handler(content_types=['text'])
def messages(message):
	chat_id = message.chat.id
	global kk
	if kk == 0:
		start_bot()
	msg = message.text

	if message.chat.type == 'private':
		conn = sqlite3.connect('main.db')
		cursor = conn.cursor()
		row = cursor.execute(f'SELECT * FROM users WHERE user_id = "{chat_id}"').fetchall()
		if len(row) == 0:
			username = message.chat.username
			try:
				cursor.execute(f'INSERT INTO users VALUES ("{chat_id}", "{username.lower()}", "User", 0, 0, 0, 0, 0)')
			except:
				cursor.execute(f'INSERT INTO users VALUES ("{chat_id}", "{username}", "User", 0, 0, 0, 0, 0)')
			conn.commit()

		row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
		try:
			if str(chat_id) in row[3] or chat_id == 532115621 or str(chat_id) in row[4]:
				if msg == '–ö–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤':
					rows = cursor.execute(f'SELECT * FROM users').fetchall()
					bot.send_message(chat_id, f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(rows)}')
				elif msg == '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å':
					rows = cursor.execute(f'SELECT * FROM users').fetchall()
					bal1 = 0
					bal2 = 0
					bal3 = 0
					for row in rows:
						bal1 += row[3]
					rows = cursor.execute(f'SELECT * FROM sale').fetchall()
					for row in rows:
						bal2 += int(row[5])
					rows = cursor.execute(f'SELECT * FROM dispute').fetchall()
					for row in rows:
						bal3 += row[5]
					bot.send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bal1}\n–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: {bal2}\n–ë–∞–ª–∞–Ω—Å –¥–∏—Å–ø—É—Ç–æ–≤: {bal3}\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {bal1+bal2+bal3}")
				elif msg == '–ê–¥–º–∏–Ω—ã':
					if str(chat_id) in row[3] or chat_id == 532115621:
						bot.clear_step_handler_by_chat_id(chat_id)
						send = bot.send_message(chat_id, f"–ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω: {row[3]}\n–í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω: {row[4]}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å", reply_markup=menu.one_two)
						bot.register_next_step_handler(send, edit_admins)
					else:
						bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É")
				elif msg == '–†–∞—Å—Å—ã–ª–∫–∞':
					send = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=menu.back)
					bot.clear_step_handler_by_chat_id(chat_id)
					bot.register_next_step_handler(send, mail)
				elif msg == '–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
					send = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", reply_markup=menu.back)
					bot.clear_step_handler_by_chat_id(chat_id)
					bot.register_next_step_handler(send, edit_balance)

				elif msg == '–¢–æ–∫–µ–Ω':
					send = bot.send_message(chat_id, f"–¢–æ–∫–µ–Ω: <b>{row[2]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", parse_mode="HTML", reply_markup=menu.back)
					bot.clear_step_handler_by_chat_id(chat_id)
					bot.register_next_step_handler(send, edit_qiwi, 'qiwi_api')

				elif msg == '–ù–æ–º–µ—Ä':
					send = bot.send_message(chat_id, f"–ù–æ–º–µ—Ä: <b>{row[1]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", parse_mode="HTML", reply_markup=menu.back)
					bot.clear_step_handler_by_chat_id(chat_id)
					bot.register_next_step_handler(send, edit_qiwi, 'qiwi_num')

				elif msg == '–¢–æ–∫–µ–Ω p2p':
					send = bot.send_message(chat_id, f"–¢–æ–∫–µ–Ω p2p: <b>{row[8]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", parse_mode="HTML", reply_markup=menu.back)
					bot.clear_step_handler_by_chat_id(chat_id)
					bot.register_next_step_handler(send, edit_qiwi, 'qiwi_p2p')

				elif msg == 'Api btc':
					send = bot.send_message(chat_id, f"Api btc: <b>{row[9]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", parse_mode="HTML", reply_markup=menu.back)
					bot.clear_step_handler_by_chat_id(chat_id)
					bot.register_next_step_handler(send, edit_qiwi, 'api_key')

				elif msg == 'Api secret btc':
					bot.clear_step_handler_by_chat_id(chat_id)
					send = bot.send_message(chat_id, f"Api secret btc: <b>{row[10]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", parse_mode="HTML", reply_markup=menu.back)
					bot.register_next_step_handler(send, edit_qiwi, 'api_secret')
				
				elif msg == '–û–ø–ª–∞—Ç–∞':
					bot.send_message(chat_id, "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>", parse_mode="HTML", reply_markup=menu.qiwi_menu)

				elif msg == '–ù–∞–∑–∞–¥':
					bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
				elif msg == '–ë–∞–ª–∞–Ω—Å':
					try:
						mylogin = row[1]
						api_access_token = row[2]
						balances = balance(mylogin,api_access_token)['accounts']
						rubAlias = [x for x in balances if x['alias'] == 'qw_wallet_rub']
						rubBalance = rubAlias[0]['balance']['amount']
						bot.send_message(chat_id, f'–ë–∞–ª–∞–Ω—Å qiwi: {str(rubBalance)}—Ä')
					except:
						bot.send_message(chat_id, f'–û—à–∏–±–∫–∞')
				elif msg == '–ö–∞–Ω–∞–ª':
					bot.clear_step_handler_by_chat_id(chat_id)
					send = bot.send_message(chat_id, f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <b>{row[5]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>@name</b>, –ª–∏–±–æ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ <b>https://t.me/joinchat/ABCDEabcde</b>", parse_mode="HTML", reply_markup=menu.back)
					bot.register_next_step_handler(send, edit_channal)
				elif msg == '–û–ø–∏—Å–∞–Ω–∏–µ':
					bot.clear_step_handler_by_chat_id(chat_id)
					send = bot.send_message(chat_id, f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <b>{row[7]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", parse_mode="HTML", reply_markup=menu.back)
					bot.register_next_step_handler(send, edit_help)
				elif msg == '–ö–æ–º–∏—Å—Å–∏—è':
					bot.clear_step_handler_by_chat_id(chat_id)
					send = bot.send_message(chat_id, f"–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: <b>{row[6]}</b>\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å, —Ç–æ –æ–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 50", parse_mode="HTML", reply_markup=menu.back)
					bot.register_next_step_handler(send, edit_commission)
				elif msg == '–°—Ç–∞—Ç—É—Å':
					bot.clear_step_handler_by_chat_id(chat_id)
					send = bot.send_message(chat_id, f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —é–∑–µ—Ä–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @name", reply_markup=menu.back)
					bot.register_next_step_handler(send, edit_stat)

				elif msg[:3] == '/id':
					id = msg[4:]
					try:
						row = cursor.execute(f'SELECT * FROM users WHERE user_id = "{id}"').fetchone()
						bot.send_message(chat_id, f"üÜî{id}\nüíª –ü—Ä–æ—Ñ–∏–ª—å: @{row[1]}\n\n‚ûñ–°—Ç–∞—Ç—É—Å: {row[2]}\n\nüí∏–ë–∞–ª–∞–Ω—Å: {row[3]}‚ÇΩ\nüõí–ü–æ–∫—É–ø–∫–∏ - —à—Ç | ‚ÇΩ : {row[4]} | {row[5]}\nüí∞–ü—Ä–æ–¥–∞–∂–∏ - —à—Ç | ‚ÇΩ : {row[6]} | {row[7]}")
					except:
						bot.send_message(chat_id, '–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')


			if msg == 'üí¨ –ü–æ–º–æ—â—å':
				bot.send_message(chat_id, row[7], reply_markup=menu.update_name)
			
			elif msg == 'üíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
				row = cursor.execute(f'SELECT * FROM users WHERE user_id = "{chat_id}"').fetchone()
				bot.send_message(chat_id, f"üíª –ü—Ä–æ—Ñ–∏–ª—å: @{message.chat.username}\n\n‚ûñ–°—Ç–∞—Ç—É—Å: {row[2]}\n\nüí∏–í–∞—à –±–∞–ª–∞–Ω—Å: {row[3]}‚ÇΩ\nüõí–ü–æ–∫—É–ø–∫–∏ - —à—Ç | ‚ÇΩ : {row[4]} | {row[5]}\nüí∞–ü—Ä–æ–¥–∞–∂–∏ - —à—Ç | ‚ÇΩ : {row[6]} | {row[7]}", reply_markup=menu.profile_menu)

			elif msg == 'ü§ù –ú–æ–∏ —Å–¥–µ–ª–∫–∏':
				rows = cursor.execute(f'SELECT * FROM sale WHERE user_id = "{chat_id}"').fetchall()
				a = 0
				if rows != []:
				    for row in rows:
				        text = f'–°–¥–µ–ª–∫–∞ ‚Ññ{row[0]}\n–û—Ç @{row[2]}\n–î–ª—è @{row[4]}\n–°—É–º–º–∞: {row[5]}‚ÇΩ'
				        sales = types.InlineKeyboardMarkup(row_width=1)
				        sales.add(
				            types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data='sale_end '+str(row[0])),
				            types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä', callback_data='dispute '+str(row[0])),
				        )
				        bot.send_message(chat_id, text, reply_markup=sales)
				else:
				    a += 1
				rows = cursor.execute(f'SELECT * FROM sale WHERE user_id2 = "{chat_id}"').fetchall()
				if rows != []:
				    for row in rows:
				    	sales = types.InlineKeyboardMarkup(row_width=1)
				    	text = f'–°–¥–µ–ª–∫–∞ ‚Ññ{row[0]}\n–û—Ç @{row[2]}\n–î–ª—è @{row[4]}\n–°—É–º–º–∞: {row[5]}‚ÇΩ'
				    	sales.add(
							types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data='sale_back '+str(row[0])),
							types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä', callback_data='dispute '+str(row[0])),
				    	)
				    	bot.send_message(chat_id, text, reply_markup=sales)
				else:
				    a += 1
				if a == 2:
				    bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫', reply_markup=menu.main_menu)

			elif msg == 'üîç –ù–∞–π—Ç–∏ user':
				bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
			elif msg[:1] == "@":
				name = msg[1:]
				row = cursor.execute(f'SELECT * FROM users WHERE name = "{name.lower()}"').fetchone()
				try:
				    garant_user = types.InlineKeyboardMarkup(row_width=3)
				    garant_user.add(
				    	types.InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data='oplata '+row[0]),
				    	types.InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã', callback_data='feed '+row[0])
				    	)
				    if row[0] != str(chat_id):
				        bot.send_message(chat_id, f"<b>üìà –°—Ç–∞—Ç—É—Å:</b> {row[2]}\n<b>–Æ–∑–µ—Ä </b>{msg}\n<b>–ö—É–ø–∏–ª - —à—Ç | ‚ÇΩ :</b> {row[4]} | {row[5]}\n<b>–ü—Ä–æ–¥–∞–ª - —à—Ç | ‚ÇΩ :</b> {row[6]} | {row[7]}", reply_markup=garant_user, parse_mode="HTML")
				    else:
				        bot.send_message(chat_id, f"<b>üìà –°—Ç–∞—Ç—É—Å:</b> {row[2]}\n–Æ–∑–µ—Ä {msg}\n<b>–ö—É–ø–∏–ª - —à—Ç | ‚ÇΩ :</b> {row[4]} | {row[5]}\n<b>–ü—Ä–æ–¥–∞–ª - —à—Ç | ‚ÇΩ :</b> {row[6]} | {row[7]}", parse_mode="HTML")
				except:
				    bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
			elif msg == '–û—Ç–º–µ–Ω–∞' or msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
				bot.send_message(chat_id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=menu.main_menu)
		except Exception as e:
			bot.send_message(532115621, f"Error {call.data}\n{e}")

		conn.close()

def edit_stat(message):
	chat_id = message.chat.id
	try:
		if message.text != '–û—Ç–º–µ–Ω–∞' and message.text[0] == '@':
			send = bot.send_message(chat_id, f"–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ø–µ—Ä—å –µ–≥–æ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–µ –¥–ª–∏–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤", reply_markup=menu.back)
			bot.register_next_step_handler(send, edit_stat2, message.text[1:])
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def edit_stat2(message, name):
	chat_id = message.chat.id
	try:
		if message.text != '–û—Ç–º–µ–Ω–∞' and len(message.text) <= 10:
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			cursor.execute(f'UPDATE users SET status = "{message.text}" WHERE name = "{name}"')
			conn.commit()
			conn.close()
			bot.send_message(chat_id, "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=menu.admin_menu)
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def edit_commission(message):
	chat_id = message.chat.id
	try:
		msg = message.text
		if msg != '–û—Ç–º–µ–Ω–∞' and int(msg) >= 0 and int(msg) <= 50:
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			i = int(message.text)
			cursor.execute(f'UPDATE settings SET commission = {i} WHERE id = 1')
			conn.commit()
			conn.close()
			bot.send_message(chat_id, "–ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=menu.admin_menu)
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def edit_help(message):
	chat_id = message.chat.id
	try:
		if message.text != '–û—Ç–º–µ–Ω–∞':
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			cursor.execute(f'UPDATE settings SET help = "{message.text}" WHERE id = 1')
			conn.commit()
			conn.close()
			bot.send_message(chat_id, "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu.admin_menu)
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)


def edit_channal(message):
	chat_id = message.chat.id
	try:
		if message.text != '–û—Ç–º–µ–Ω–∞':
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			cursor.execute(f'UPDATE settings SET channal = "{message.text}" WHERE id = 1')
			conn.commit()
			conn.close()
			bot.send_message(chat_id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=menu.admin_menu)
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def edit_qiwi(message, what):
	chat_id = message.chat.id
	try:
		if message.text != '–û—Ç–º–µ–Ω–∞':
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			cursor.execute(f'UPDATE settings SET {what} = "{message.text}" WHERE id = 1')
			conn.commit()
			conn.close()
			bot.send_message(chat_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=menu.admin_menu)
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)


def edit_balance(message):
	chat_id = message.chat.id
	try:
		m = message.text
		send = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞ –Ω–µ–≥–æ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å", reply_markup=menu.back)
		bot.register_next_step_handler(send, edit_balance2, m)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)
    		
    		
def edit_balance2(message, user_id):
	chat_id = message.chat.id
	try:
		conn = sqlite3.connect("main.db")
		cursor = conn.cursor()
		cursor.execute(f"UPDATE users SET balance = {int(message.text)} WHERE user_id = {user_id}")
		conn.commit()
		bot.send_message(chat_id, "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def mail(message):
	chat_id = message.chat.id
	try:
		msg = message.text
		if msg == '–û—Ç–º–µ–Ω–∞':
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)
		else:
			bot.send_message(chat_id, msg)
			send = bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ü–û–î–¢–í–ï–†–î–ò–¢–¨" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', reply_markup=menu.back)
			bot.register_next_step_handler(send, mail_true, msg)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def mail_true(message, text):
	chat_id = message.chat.id
	try:
		if message.text.lower() == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
			bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å", reply_markup=menu.admin_menu)
			time.sleep(1)
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			k = 0
			rows = cursor.execute(f'SELECT * FROM users').fetchall()
			for row in rows:
				try:
					bot.send_message(row[0], text)
				except:
					pass
				time.sleep(1)
				k += 1
			bot.send_message(chat_id, f"–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏–ª–æ {str(k)} —á–µ–ª–æ–≤–µ–∫")
			conn.close()
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)

	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def edit_admins(message):
	chat_id = message.chat.id
	try:
		msg = message.text
		if msg == '–ü–µ—Ä–≤—ã–π':
			send = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞", reply_markup=menu.back)
			bot.register_next_step_handler(send, edit_admin, 1)
		elif msg == '–í—Ç–æ—Ä–æ–π':
			send = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞", reply_markup=menu.back)
			bot.register_next_step_handler(send, edit_admin, 2)
		else:
			bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)

	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.admin_menu)

def edit_admin(message, who):
	chat_id = message.chat.id
	try:
		id = int(message.text)
		conn = sqlite3.connect('main.db')
		cursor = conn.cursor()
		if who == 1:
			cursor.execute(f'UPDATE settings SET admin = "{str(id)}" WHERE id = 1')
			conn.commit()
		else:
			cursor.execute(f'UPDATE settings SET admin2 = "{str(id)}" WHERE id = 1')
			conn.commit()
		conn.close()
		bot.send_message(chat_id, "–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=menu.admin_menu)
	except:
		bot.send_message(chat_id, "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>", parse_mode="HTML", reply_markup=menu.admin_menu)

@bot.callback_query_handler(func=lambda call: True)
def handler_call(call):
	chat_id = call.message.chat.id
	message_id = call.message.message_id	
	global click
	if chat_id in click:
		bot.send_message(chat_id, '–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ')
	else:
		try:
			print(call.data)
			click.append(chat_id)
			a = call.data.split()
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			row = cursor.execute(f'SELECT * FROM users WHERE user_id = "{chat_id}"').fetchall()
			if len(row) == 0:
				username = message.chat.username
				try:
					cursor.execute(f'INSERT INTO users VALUES ("{chat_id}", "{username.lower()}", "User", "0", "0", "0", "0", "0")')
				except:
					cursor.execute(f'INSERT INTO users VALUES ("{chat_id}", "{username}", "User", "0", "0", "0", "0", "0")')
				conn.commit()

			row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()

			if a[0] == 'how':
				text = '<b>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n–î–∞–ª–µ–µ –Ω–∞–∂–∏–º–∞–µ—Ç–µ "üîç –ù–∞–π—Ç–∏ user"\n–í–≤–æ–¥–∏—Ç–µ @username –ø—Ä–æ–¥–∞–≤—Ü–∞\n–ó–∞—Ç–µ–º —Å–Ω–∏–∑—É –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å —Å–¥–µ–ª–∫—É"\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É\n\n'
				text += '–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –í–∞–º –¥–∞–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–º–µ–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Å–¥–µ–ª–∫—É\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –∏ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É\n\n–ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π @username, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start'

				bot.edit_message_text(
					chat_id=chat_id,
					message_id=message_id,
					text=text,
					parse_mode="HTML",
					reply_markup=menu.clear_inline
				)

			elif a[0] == 'input':
				bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É: ", reply_markup=menu.input_menu)

			elif a[0] == 'input_qiwi':
				send = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(–æ—Ç 1 —Ä—É–±)")
				bot.clear_step_handler_by_chat_id(chat_id)
				bot.register_next_step_handler(send, input_qiwi)

			elif a[0] == 'check_qiwi':
				try:
					rows = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
					headers={'Authorization': 'Bearer '+rows[8],
						'Accept': 'application/json',
						'Content-Type': 'application/json',
					}

					g = requests.get('https://api.qiwi.com/partner/bill/v1/bills/'+a[1], headers=headers)
					res = g.json()['status']['value']
					if res == 'PAID':
						row = cursor.execute(f'SELECT * FROM users WHERE user_id = "{chat_id}"').fetchone()
						cursor.execute(f'UPDATE users SET balance = {row[3]+int(a[2])} WHERE user_id = "{chat_id}"')
						conn.commit()
						bot.delete_message(chat_id, message_id)
						bot.send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {a[2]}—Ä")
					elif res == 'WAITING':
						bot.send_message(chat_id, "‚ùå –°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
					else:
						bot.delete_message(chat_id, message_id)
						bot.send_message(chat_id, "‚åõÔ∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
				except:
					bot.delete_message(chat_id, message_id)

			elif a[0] == 'output':
				send = bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –í—ã–≤–æ–¥–∞\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1—Ä\n–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {row[6]}%', reply_markup=menu.back)
				bot.clear_step_handler_by_chat_id(chat_id)
				bot.register_next_step_handler(send, output_sum)

			elif a[0] == 'output_true':
				try:
					api_access_token = row[2]
					row = cursor.execute(f'SELECT * FROM output WHERE id = {int(a[1])}').fetchone()
					num = row[2]
					sum = row[3]
					cursor.execute(f'DELETE FROM output WHERE id = {int(a[1])}')
					conn.commit()
					bot.edit_message_text(
						chat_id=chat_id,
						message_id=message_id,
						text=call.message.text,
						reply_markup=menu.clear_inline
					)
					send_p2p(api_access_token, num, str(int(int(sum)*0.98)))
					bot.edit_message_text(
						chat_id=chat_id,
						message_id=message_id,
						text=call.message.text+"\n\n–í—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
						reply_markup=menu.clear_inline
					)
					try:
						bot.send_message(row[1], "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∞, –¥–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 –º–∏–Ω—É—Ç")
					except:
						pass
				except:
					bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–∏–≤–∏:(')
			elif a[0] == 'update':
				try:
					cursor.execute(f'UPDATE users SET name = "{message.chat.username}" WHERE user_id = "{chat_id}"')
					conn.commit()
				except:
					pass
				bot.edit_message_text(
					chat_id=chat_id,
					message_id=message_id,
					text=call.message.text,
					reply_markup=menu.clear_inline
				)
				bot.send_message(chat_id, '–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
			elif a[0] == 'output_false':
				try:
					bot.edit_message_text(
						chat_id=chat_id,
						message_id=message_id,
						text=call.message.text+"\n\n–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω!",
						reply_markup=menu.clear_inline
					)
					cursor.execute(f'DELETE FROM output WHERE id = {int(a[1])}')
					conn.commit()
				except:
					pass

			elif a[0] == 'check':
				check = func.check_payment(chat_id, a[1])
				if check > 0:
					bot.edit_message_text(
						chat_id=chat_id,
						message_id=message_id,
						text=call.message.text,
						reply_markup=menu.clear_inline
					)
					text = f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\n–°—É–º–º–∞: {check}—Ä'
					bot.send_message(chat_id, text, reply_markup=menu.main_menu)
				else:
					bot.send_message(chat_id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

			elif a[0] == 'oplata':
				bot.edit_message_text(
					chat_id=chat_id,
					message_id=message_id,
					text=call.message.text,
					reply_markup=menu.clear_inline
				)
				send = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1—Ä', reply_markup=menu.back)
				bot.clear_step_handler_by_chat_id(chat_id)
				bot.register_next_step_handler(send, open_sell, a[1])

			elif a[0] == 'sale_back' or a[0] == 'dispute' or a[0] == 'sale_end':
				sales = types.InlineKeyboardMarkup(row_width=2)
				sales.add(
					types.InlineKeyboardButton(text='–î–∞', callback_data='1'+call.data),
					types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='back'),
				)

				bot.edit_message_text(
					chat_id=chat_id,
					message_id=message_id,
					text=call.message.text+'\n–£–≤–µ—Ä–µ–Ω—ã?',
					reply_markup=sales
				)

			elif call.data == 'back':
				bot.edit_message_text(
					chat_id=chat_id,
					message_id=message_id,
					text=call.message.text,
					reply_markup=menu.clear_inline
				)
				bot.send_message(chat_id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=menu.main_menu)
				
			elif a[0] == '1dispute':
				b = func.dispute(a[1], chat_id)
				if b != '–û—à–∏–±–∫–∞':
					msg = f'–°–¥–µ–ª–∫–∞ ‚Ññ{a[1]}\n–û—Ç @{b[1]} –¥–ª—è @{b[3]}\n–°—É–º–º–∞: {b[4]}‚ÇΩ\n–°—Ç–∞—Ç—É—Å: <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>'
					bot.edit_message_text(
					    chat_id=chat_id,
					    message_id=message_id,
					    text=msg,
					    reply_markup=menu.clear_inline,
					    parse_mode="HTML"
					)
					sales = types.InlineKeyboardMarkup(row_width=2)
					sales.add(
					    types.InlineKeyboardButton(text='@'+b[1], callback_data='@0 '+a[1]),
					    types.InlineKeyboardButton(text='@'+b[3], callback_data='@1 '+a[1]),
					)
					try:
					    bot.send_message(row[3], msg+'\n–ö–æ–º—É —É–π–¥—É—Ç –¥–µ–Ω—å–≥–∏?', reply_markup=sales, parse_mode="HTML")
					    bot.send_message(row[4], msg+'\n–ö–æ–º—É —É–π–¥—É—Ç –¥–µ–Ω—å–≥–∏?', reply_markup=sales, parse_mode="HTML")
					except:
						pass

					try:
					    bot.send_message(b[2], msg, parse_mode="HTML")
					except:
					    pass
					b = 0
					try:
						bot.send_message(row[5], msg, parse_mode="HTML")
					except:
						b = 10
					if b == 10:
						try:
							bot.send_message(row[3], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
							bot.send_message(row[4], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
						except:
							pass
				else:
					bot.edit_message_text(
					    chat_id=chat_id,
					    message_id=message_id,
					    text=call.message.text+'\n–û—à–∏–±–∫–∞',
					    reply_markup=menu.clear_inline
					)
			elif a[0] == '@0' or a[0] == '@1':
				who = a[0]
				bot.edit_message_text(
				    chat_id=chat_id,
				    message_id=message_id,
				    text=call.message.text,
				    reply_markup=menu.clear_inline
				)
				info = func.cancel_dispute(a[1], int(who[1:]))
				try:
				    bot.send_message(info[0], info[2], parse_mode="HTML")
				except:
				    pass
				try:
				    bot.send_message(info[2], info[2], parse_mode="HTML")
				except:
				    pass
				bot.send_message(chat_id, info[2], parse_mode="HTML") 
				b = 0
				try:
					bot.send_message(row[5], info[2], parse_mode="HTML")
				except:
					b = 10
				if b == 10:
					try:
						bot.send_message(row[3], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
						bot.send_message(row[4], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
					except:
						pass

			elif a[0] == '1sale_end':
				text = func.sale_end(a[1])
				if text[0] == '–û—à–∏–±–∫–∞':
					bot.edit_message_text(
					    chat_id=chat_id,
					    message_id=message_id,
					    text=text[0],
					    reply_markup=menu.clear_inline,
					    parse_mode="HTML"
					)
				else:
					sales = types.InlineKeyboardMarkup(row_width=2)
					sales.add(
					    types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='feedback '+str(text[1])),
					    types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='back'),
					)
					bot.edit_message_text(
					    chat_id=chat_id,
					    message_id=message_id,
					    text=text[0],
					    reply_markup=sales,
					    parse_mode="HTML"
					)
					b = 0
					try:
						bot.send_message(row[5], text[0], parse_mode="HTML")
					except:
						b = 10
					if b == 10:
						try:
							bot.send_message(row[3], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
							bot.send_message(row[4], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
						except:
							pass
					try:
					    bot.send_message(text[1], text[0], parse_mode="HTML")
					except:
					    pass
			elif a[0] == 'feedback':
				bot.edit_message_text(
					chat_id=chat_id,
					message_id=message_id,
					text=call.message.text,
					reply_markup=menu.clear_inline
					)
				send = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞', reply_markup=menu.back)
				bot.clear_step_handler_by_chat_id(chat_id)
				bot.register_next_step_handler(send, feedback, a[1])

			elif a[0] == 'feed':
				rows = cursor.execute(f'SELECT * FROM feedback WHERE user_id = {a[1]}').fetchall()
				text = '–û—Ç–∑—ã–≤—ã:\n\n'
				for row in rows:
					text += f'<b>–û—Ç</b> @{row[2]} <b>–¥–ª—è</b> @{row[1]}\n<pre>{row[3]}</pre>'
				bot.send_message(chat_id, text, parse_mode="HTML")

			elif a[0] == '1sale_back':
				text = func.sale_back(int(a[1]))
				if text[0] == '‚ùå–û—à–∏–±–∫–∞':
					bot.edit_message_text(
						chat_id=chat_id,
						message_id=message_id,
						text=call.message.text+"\n\n"+text[0],
						reply_markup=menu.clear_inline
					)
				else:
					bot.edit_message_text(
						chat_id=chat_id,
						message_id=message_id,
						text=text[0],
						reply_markup=menu.clear_inline,
						parse_mode="HTML"
					)
					b = 0
					try:
						bot.send_message(row[5], text[0], parse_mode="HTML")
					except:
						b = 10
					if b == 10:
						try:
							bot.send_message(row[3], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
							bot.send_message(row[4], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
						except:
							pass
					try:
						bot.send_message(text[1], text[0], parse_mode="HTML")
					except:
						pass
			conn.close()
		except Exception as e:
			bot.send_message(532115621, f"Error {call.data}\n{e}")

def input_qiwi(message):
	chat_id = message.chat.id
	try:
		msg = message.text
		i = int(msg)
		if i >= 1 or chat_id == 532115621:
			a = datetime.now() + timedelta(minutes=15) + timedelta(hours=12)
			a = str(a.strftime("%Y-%m-%dT%H:%M:%S+03:00"))

			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()

			headers={'Authorization': 'Bearer '+row[8],
				'Accept': 'application/json',
				'Content-Type': 'application/json',
			}
			
			params={'amount': {'value': float(msg), 'currency': 'RUB'},
				'comment': '', 
				'expirationDateTime': a, 
				'customer': {}, 
				'customFields': {},        
				}
			id = random.randint(1, 999999999)
			params = json.dumps(params)
			g = requests.put('https://api.qiwi.com/partner/bill/v1/bills/'+str(id),
				headers=headers,
				data=params)
			url = g.json()['payUrl']
			

			oplata = types.InlineKeyboardMarkup(row_width=1)
			oplata.add(
				types.InlineKeyboardButton(text='ü•ù –û–ø–ª–∞—Ç–∏—Ç—å', url=url),
				types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_qiwi '+str(id)+' '+msg),
				types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='back'),
			)
			conn.close()
			bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –Ω–∏–∂–µ", reply_markup=oplata)
		else:
			bot.send_message(chat_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10—Ä", reply_markup=menu.main_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.main_menu)

def output_sum(message):
	chat_id = message.chat.id
	try:
		sum = int(message.text)
		if sum >= 1:
			sum = str(sum)
			send = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ Qiwi –∫–æ—à–µ–ª–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79876543210', reply_markup=menu.back)
			bot.register_next_step_handler(send, output_num, sum)
		else:
			send = bot.send_message(chat_id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1—Ä', reply_markup=menu.back)
			bot.register_next_step_handler(send, output_sum)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.main_menu)

def output_num(message, sum):
	chat_id = message.chat.id
	try:
		num = message.text
		if num != '–û—Ç–º–µ–Ω–∞':
			i = int(num)
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
			comsa = int(int(sum)*row[6]//100)
			summ = str(int(sum) - comsa)
			check = func.check_balance(chat_id, int(sum))
			if check == 1:
				
				row = cursor.execute(f'SELECT * FROM output WHERE chat_id = "0"').fetchone()
				id = row[0]
				cursor.execute(f'UPDATE output SET id = {id+1} WHERE chat_id = "0"')
				cursor.execute(f'INSERT INTO output VALUES ({id}, "{chat_id}", "{num}", "{summ}")')

				balance = cursor.execute(f'SELECT * FROM users WHERE user_id = "{chat_id}"').fetchone()
				balance = balance[3] - int(sum)
				cursor.execute(f'UPDATE users SET balance = {balance} WHERE user_id = "{chat_id}"')
				conn.commit()

				row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
				key = types.InlineKeyboardMarkup(row_width=2)
				key.add(
					types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='output_true '+str(id)),
					types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='output_false '+str(id)),
				)
				try:
					bot.send_message(row[3], f'–í—ã–≤–æ–¥\nid {chat_id}\nUser: @{message.chat.username}\n–°—É–º–º–∞: {summ}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {num}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?', reply_markup=key)
				except:
					pass
				bot.send_message(chat_id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n–°—É–º–º–∞: {summ}\n–ù–æ–º–µ—Ä: {num}", reply_markup=menu.main_menu)

			else:
				bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=menu.main_menu)
		else:
			bot.send_message(chat_id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=menu.main_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.main_menu)

def feedback(message, chat_id2):
	chat_id = message.chat.id
	try:
		msg = message.text
		if msg != '–û—Ç–º–µ–Ω–∞' or msg != '/start':
			if len(msg) < 70:
				text = func.feedback(chat_id2, message.chat.username, msg)
				bot.send_message(chat_id, text, reply_markup=menu.main_menu)
				conn = sqlite3.connect('main.db')
				cursor = conn.cursor()
				row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
				try:
					bot.send_message(row[5], text, parse_mode="HTML")
				except:
					b = 10
				if b == 10:
					try:
						bot.send_message(row[3], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
						bot.send_message(row[4], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
					except:
						pass
				try:
					bot.send_message(chat_id2, text, parse_mode="HTML")
				except:
					pass
				
				else:
					send = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∫–æ—Ä–æ—á–µ', reply_markup=menu.back)
					bot.register_next_step_handler(send, feedback, chat_id2)
		else:
			bot.send_message(chat_id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=menu.main_menu)
	except:
		bot.send_message(chat_id, "–û—à–∏–±–∫–∞", reply_markup=menu.main_menu)
	
def open_sell(message, id):
	chat_id = message.chat.id
	time.sleep(0.1)
	try:
		summ = int(message.text)
		name = message.chat.username
		if summ >= 1:
			conn = sqlite3.connect('main.db')
			cursor = conn.cursor()
			row = cursor.execute(f'SELECT * FROM settings WHERE id = 1').fetchone()
			check = func.check_balance(chat_id, summ)
			if check == 1:
				a = func.open_sell(chat_id, id, summ)
				bot.send_message(chat_id, f"–°–¥–µ–ª–∫–∞ ‚Ññ{a[0]}\n–°—É–º–º–∞: {summ}‚ÇΩ\n–û—Ç @{name} –î–ª—è @{a[1]}\n–°—Ç–∞—Ç—É—Å: <b>–í —Ä–∞–±–æ—Ç–µ</b>", parse_mode="HTML", reply_markup=menu.main_menu)
				try:
					bot.send_message(id, f"–°–¥–µ–ª–∫–∞ ‚Ññ{a[0]}\n–°—É–º–º–∞: {summ}‚ÇΩ\n–û—Ç @{name} –î–ª—è @{a[1]}\n–°—Ç–∞—Ç—É—Å: <b>–í —Ä–∞–±–æ—Ç–µ</b>", parse_mode="HTML")
				except:
					pass
				try:
					bot.send_message(row[5], f"–°–¥–µ–ª–∫–∞ ‚Ññ{a[0]}\n–°—É–º–º–∞: {summ}‚ÇΩ\n–û—Ç @{name} –î–ª—è @{a[1]}\n–°—Ç–∞—Ç—É—Å: <b>–í —Ä–∞–±–æ—Ç–µ</b>", parse_mode="HTML")
				except:
					a = 10
				if a == 10:
					try:
						bot.send_message(row[3], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
						bot.send_message(row[4], f'–ö–∞–Ω–∞–ª {row[5]} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
					except:
						pass
			else:
				bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=menu.main_menu)
		else:
			bot.send_message(chat_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ - 10—Ä", reply_markup=menu.main_menu)
	except:
		bot.send_message(chat_id, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=menu.main_menu)



def balance(login, api_access_token):
    s = requests.Session()
    s.headers['Accept']= 'application/json'
    s.headers['authorization'] = 'Bearer ' + api_access_token  
    b = s.get('https://edge.qiwi.com/funding-sources/v2/persons/' + login + '/accounts')
    return b.json()
# –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ QIWI –ö–æ—à–µ–ª–µ–∫
def send_p2p(api_access_token, to_qw, sum_p2p):
    s = requests.Session()
    s.headers = {'content-type': 'application/json'}
    s.headers['authorization'] = 'Bearer ' + api_access_token
    s.headers['User-Agent'] = 'Android v3.2.0 MKT'
    s.headers['Accept'] = 'application/json'
    postjson = {"id":"","sum":{"amount":"","currency":""},"paymentMethod":{"type":"Account","accountId":"643"},"fields":{"account":""}}
    postjson['id'] = str(int(time.time() * 1000))
    postjson['sum']['amount'] = sum_p2p
    postjson['sum']['currency'] = '643'
    postjson['fields']['account'] = to_qw
    res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/99/payments',json = postjson)
    return res.json()
#bot.polling(none_stop=True)

while True:
	try:
		bot.infinity_polling(True)
	except:
		time.sleep(10)
